#version 310 es

#ifndef TILE_SIZE_X
#define TILE_SIZE_X 8u
#endif

#ifndef TILE_SIZE_Y
#define TILE_SIZE_Y 8u
#endif

layout(local_size_x = TILE_SIZE_X, local_size_y = TILE_SIZE_Y) in;

#include "structs.h"
#include "flags.h"
#include "buffers.h"
#include "util.h"
#include "clip.h"
#include "coverage.h"

#define prim primitive_data.data[prim_id]

void main()
{
   uvec2 local = gl_LocalInvocationID.xy;
   uint tile = gl_WorkGroupID.x;

   uvec2 coord = work.desc[tile].base * uvec2(TILE_SIZE_X, TILE_SIZE_Y) + local;
   uint prim_id = LOD_INFO_PRIMITIVE(work.desc[tile].lod_info_primitive);
   uint flags = prim.flags;

   int y = int(coord.y) * 4;
   ivec2 clip = unpack_scissor(prim.scissor_y);

   // Scissor test and find Y bounds for where to rasterize.
   int ycur = prim.yh & RDP_SUBPIXELS_INVMASK;
   int yhlimit = max(prim.yh, clip.x);
   int yllimit = min(prim.yl, clip.y);
   int ylfar = yllimit | RDP_SUBPIXELS_MASK;

   // Reject right away.
   if ((y + RDP_SUBPIXELS) <= yhlimit || y >= ylfar)
   {
      COVERAGE(tile, local) = 0u;
      return;
   }

   // Shifts and masks already applied on CPU.
   int DxMDy = prim.DxMDy;
   int DxHDy = prim.DxHDy;
   int DxLDy = prim.DxLDy;
   int xm = prim.xm;
   int xh = prim.xh;
   int xl = prim.xl;

   // Compute X bounds, for all 4 Y subpixels.
   // Use branchless mux logic to select appropriate version of xlr0.
   ivec4 xlr0_above = xm + DxMDy * ((y - ycur) + ivec4(0, 1, 2, 3));
   ivec4 xlr0_below = xl + DxLDy * ((y - prim.ym) + ivec4(0, 1, 2, 3));
   ivec4 xlr0 = mix(xlr0_below, xlr0_above, lessThan(y + ivec4(0, 1, 2, 3), ivec4(prim.ym)));
   ivec4 xlr1 = xh + DxHDy * ((y - ycur) + ivec4(0, 1, 2, 3));
   
   // Clip X.
   bvec2 curunder, curover;
   ivec4 xlsc, xrsc;

   // Unpack X scissor.
   clip = unpack_scissor(prim.scissor_x) << 1;
   clip_x(clip, xlr0, xlsc, curunder.x, curover.x);
   clip_x(clip, xlr1, xrsc, curunder.y, curover.y);

   bool flip = PRIMITIVE_IS_FLIP(flags);

   // Detect where the two lines cross.
   // Get a boolean mask for which subscanlines have crossing scanlines.
   // XXX: Shouldn't this be <=?
   // XXX: Also, why the weird bitmath here?
   bvec4 clipped = flip ?
      lessThan((xlr0 & 0xfffc000) ^ 0x08000000, (xlr1 & 0xfffc000) ^ 0x08000000) :
      lessThan((xlr1 & 0xfffc000) ^ 0x08000000, (xlr0 & 0xfffc000) ^ 0x08000000);

   // Add subpixel Y clip here.
   clipped = bitwiseOr(clipped,
      lessThan(y + ivec4(0, 1, 2, 3), ivec4(yhlimit)),
      greaterThanEqual(y + ivec4(0, 1, 2, 3), ivec4(yllimit)));

   // TODO: Missing sckeepodd, scfield here. Interlacing?
   // If we can invalidate the scanline for all subpixels in at least one of three ways, we can kill it early.
   bool invalid = all(clipped) || all(curunder) || all(curover);
   if (invalid)
   {
      COVERAGE(tile, local) = 0u;
      return;
   }

   if (!flip)
   {
      ivec4 tmp = xlsc;
      xlsc = xrsc;
      xrsc = tmp;
   }

   // Intentionally clip out invalid scanlines so we don't get coverage for them and that they don't participate in min/max.
   xrsc = mix(xrsc, ivec4(0x7fff), clipped);
   xlsc = mix(xlsc, ivec4(0), clipped);

   // Don't include invalid subsample scanlines in min/max.
   int lx = horizontalMin(xrsc >> 3);
   int rx = horizontalMax(xlsc >> 3);

   // Find multisampled coverage.
   // For copy pipe, we compute coverage for 64-bits of data at a time, so splat
   // coverage information across those pixels.
   // Angrylion reads 64-bits of data at a time starting at span start.
   int xbase = int(coord.x);

   // FIXME: Do we snap from left or right?
   // Probably won't really matter in practice.
   int copy_xbase = ((xbase - lx) & int(prim.span_stride_combiner >> 16u)) + lx;

   uint coverage = compute_coverage(xrsc, xlsc, copy_xbase);
   // Extra coverage for fill mode, conservative.
   if (copy_xbase >= lx && copy_xbase <= rx)
      coverage |= 0x100u;

   COVERAGE(tile, local) = coverage;

   // Coverage in 1/2 cycle mode will always be 0.
   if ((coverage & 0xffu) == 0u)
      return;

   // MK64 reads shade color even though it doesn't have any varyings.
   // I assume it's supposed to be just black in this case.
   if (!PRIMITIVE_INTERPOLATE_VARYINGS(flags))
   {
      RGBA(tile, local) = 0u;
      DEPTH(tile, local) = 0;
      return;
   }

   // Varyings are interpolated along the major axis.
   // For some reason, we sample at the 1st or 4th subpixel depending on some flags computed earlier ...
   int xlr = PRIMITIVE_DO_OFFSET(flags) ? xlr1.w : xlr1.x;
   int xfrac = (xlr >> 8) & 0xff;
   ivec4 d_rgba_dxh;
   ivec4 d_stwz_dxh;

   if (!PRIMITIVE_CYCLE_TYPE_IS_COPY(flags))
   {
      d_rgba_dxh = (prim.attr.d_rgba_dx >> 8) & ~1;
      d_stwz_dxh = (prim.attr.d_stwz_dx >> 8) & ~1;
   }
   else
   {
      d_rgba_dxh = ivec4(0);
      d_stwz_dxh = ivec4(0);
   }

   int xoff = xbase - (xlr >> 16);

   // The N64 clips interpolation inside the coverage region.
#if 0
   ivec2 centroid_offsets = ivec2(texelFetch(uCentroidLUT, ivec2(int(coverage & 0xffu), 0), 0).xy);
#else
   // Workaround broken nVidia driver.
   ivec2 centroid_offsets = ivec2(textureLod(uCentroidLUT, vec2((float(coverage & 0xffu) + 0.5) / 256.0, 0.5), 0.0).xy);
#endif

   // RGBA
   // Lerp Edge
   ivec4 rgba = prim.attr.rgba + ((y - ycur) >> 2) * prim.attr.d_rgba_de;
   // Lerp Subpixel X
   rgba = ((rgba & ivec4(~0x1ff)) + prim.attr.d_rgba_diff - xfrac * d_rgba_dxh) & ivec4(~0x3ff);
   // Lerp X
   ivec4 d_rgba_dx = prim.attr.d_rgba_dx;
   ivec4 d_rgba_dy = prim.attr.d_rgba_dy;
   rgba += xoff * d_rgba_dx;

   // Centroid offset
   ivec4 centroid_offset =
      centroid_offsets.x * (d_rgba_dx >> 14) +
      centroid_offsets.y * (d_rgba_dy >> 14);

   rgba = (((rgba >> 12) & ~3) + centroid_offset) >> 4;

   // Clamp and write out
   rgba = special_9bit_clamp(rgba & 0x1ff);
   RGBA(tile, local) = pack_rgba8(uvec4(rgba));
   ////

   // STWZ
   // Lerp Edge
   ivec4 stwz = prim.attr.stwz + ((y - ycur) >> 2) * prim.attr.d_stwz_de;
   // Lerp Subpixel X
   stwz = ((stwz & ivec4(~0x1ff)) + prim.attr.d_stwz_diff - xfrac * d_stwz_dxh) & ivec4(~0x3ff);
   // Lerp X
   ivec4 d_stwz_dx = prim.attr.d_stwz_dx & ivec4(~0x1f);
   stwz += xoff * d_stwz_dx;
   int z = stwz.w;

   if (PRIMITIVE_SAMPLE_TEX_PIPELINED(flags) || PRIMITIVE_SAMPLE_TEX_LOD(flags))
   {
      // Poke at next pixel since combiner will read it later in the pipeline ...
      // We will also need this UV for implementing LOD later.
      ivec3 next = (stwz.xyz + (PRIMITIVE_IS_FLIP(flags) ? 1 : -1) * d_stwz_dx.xyz) >> 16;
      ivec2 uv;
      // Far from bitexact, but having bitexact division for UV coords seems like a waste of effort for now.
      if (PRIMITIVE_PERSPECTIVE(flags))
         uv = next.z == 0 ? ivec2(0xffff) : ivec2(32768.0 * vec2(next.xy) / float(next.z));
      else
         uv = next.xy;
      UV_NEXT(tile, local) = pack_s16(uv);
   }

   if (PRIMITIVE_SAMPLE_TEX_LOD(flags))
   {
      ivec3 next = (stwz.xyz + prim.attr.d_stwz_dy.xyz) >> 16;
      ivec2 uv;
      if (PRIMITIVE_PERSPECTIVE(flags))
         uv = next.z == 0 ? ivec2(0xffff) : ivec2(32768.0 * vec2(next.xy) / float(next.z));
      else
         uv = next.xy;
      UV_PREV_Y(tile, local) = pack_s16(uv);
   }

   // Do perspective interpolation here so we can reduce bandwidth.
   // Also makes it much easier to implement LOD in texture stage later.
   {
      stwz.xyz >>= 16;
      ivec2 uv;
      // Far from bitexact, but having bitexact division for UV coords seems like a waste of effort for now.
      if (PRIMITIVE_PERSPECTIVE(flags))
         uv = stwz.z == 0 ? ivec2(0xffff) : ivec2(32768.0 * vec2(stwz.xy) / float(stwz.z));
      else
         uv = stwz.xy;
      UV(tile, local) = pack_s16(uv);
   }

   // Override Z if using primitive Z
   if (!PRIMITIVE_INTERPOLATE_Z(flags))
      z = prim.primitive_z & 0xffff0000;
   z = (stwz.w >> 10) & 0x3fffff;

   if (PRIMITIVE_INTERPOLATE_Z(flags))
   {
      // Centroid offset
      int centroid_offset = centroid_offsets.x * (d_stwz_dx.w >> 10) +
                            centroid_offsets.y * (prim.attr.d_stwz_dy.w >> 10);
      z = ((z << 2) + centroid_offset) >> 5;
   }
   else
      z >>= 3;

   // Should be a correct branchless version of the awkward zanded in Angrylion.
   // This pattern seems very similar to the special_9bit clamp, hrm ...
   z = clamp(((z + 0x20000) & 0x7ffff) - 0x20000, 0, 0x3ffff);
   DEPTH(tile, local) = z;
   ////
}

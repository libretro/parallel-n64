#version 310 es
precision highp int;
precision highp float;

#ifndef TILE_SIZE_X
#define TILE_SIZE_X 8u
#endif

#ifndef TILE_SIZE_Y
#define TILE_SIZE_Y 8u
#endif

layout(local_size_x = TILE_SIZE_X, local_size_y = TILE_SIZE_Y) in;

#include "structs.h"
#include "flags.h"
#include "buffers.h"
#include "util.h"
#include "blender.h"

#if Z_BUFFER
#include "depth.h"
#endif

#define rdpprim primitive_data.data[current_prim]

void main()
{
   uint tile_id = gl_WorkGroupID.y * constants.TilesX + gl_WorkGroupID.x;
   uint head = tile_list_header.heads[tile_id];
   if (head == -1u)
      return;

   uvec2 coord = gl_GlobalInvocationID.xy;
   uvec2 local = gl_LocalInvocationID.xy;
   uint framebuffer_offset = coord.y * constants.FramebufferSize.x + coord.x;

   // Read from framebuffer.
#if COLOR_BPP == 32
   uvec4 pixel = unpack_rgba8(framebuffer.data[framebuffer_offset]);
   // Coverage is stored in the top 3 bits of alpha.
   pixel.a >>= 5u;
#elif COLOR_BPP == 16
   uint value = framebuffer.data[framebuffer_offset];
   uvec4 pixel = uvec4(
      (value >> 10u) & 0xf8u,
      (value >>  5u) & 0xf8u,
      (value >>  0u) & 0xf8u,
      (value & 7u));
#elif COLOR_BPP == 8
   // Splat.
   uvec4 pixel = uvec4(framebuffer.data[framebuffer_offset] >> 3u);
   // Coverage in 8-bpp always seems to be max.
   pixel.a = framebuffer.data[framebuffer_offset] & 7u;
#endif

#if Z_BUFFER
#if COLOR_DEPTH_ALIAS
   uvec2 pixel_z = unpack_depth(framebuffer.data[framebuffer_offset]);
#else
   uvec2 pixel_z = unpack_depth(framebuffer_depth.data[framebuffer_offset]);
#endif
#endif

   uvec2 node = uvec2(head);
   do
   {
      node = tile_list.nodes[node.y];
      uint current_prim = node.x;
      uint tile = current_prim >> MAX_PRIMITIVES_LOG2;
      current_prim &= (MAX_PRIMITIVES - 1u);

      uint coverage_bits = COVERAGE(tile, local);
      if ((coverage_bits & 0x100u) == 0u)
         continue;

      uint flags = rdpprim.flags;
      uint cycle_type = PRIMITIVE_CYCLE_TYPE(flags);

      // Early exit.
      if ((cycle_type != CYCLE_TYPE_FILL) && ((coverage_bits & 0xffu) == 0u))
         continue;

      // This will need to be 16-bit eventually ...
      int shadea = int(RGBA(tile, local) & 0xffu);
      ivec4 combined = ivec4(unpack_rgba8(COMBINED(tile, local)));

      uint post_alpha_coverage = coverage_bits >> 24u;
      uint newcvg = pixel.a + post_alpha_coverage;
      bool overflow = (newcvg & 8u) != 0u;
      bool farther = true;
      coverage_bits &= 0xffu;

      // Compute Z as early as possible since if we fail Z-test, we can exit early.
#if Z_BUFFER
      // dz is precomputed on CPU even for pixel Z.
      int dz = rdpprim.primitive_z & 0xffff;
      // TODO: Move to CPU.
      int dzenc = dz_compress(dz);
      int z = DEPTH(tile, local);
#endif

      // Run different paths depending on what we need to do per primitive.
      if (cycle_type == CYCLE_TYPE_FILL)
      {
#if COLOR_BPP == 32
         pixel = unpack_rgba8(rdpprim.fill_color_blend);
         pixel.a >>= 5u;
#elif COLOR_BPP == 16
         // Assume that fb_addr is always aligned.
         uint addr = constants.FramebufferSize.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x;
         uint value = (rdpprim.fill_color_blend >> (16u * (~addr & 1u))) & 0xffffu;

         pixel.r = (value >> 8u);
         pixel.g = (value >> 3u);
         pixel.b = (value << 2u);
         pixel.rgb &= 0xf8u;
         pixel.a = 7u * (value & 1u);
#elif COLOR_BPP == 8
         // Assume that fb_addr is always aligned.
         uint addr = constants.FramebufferSize.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x;
         uint value = (rdpprim.fill_color_blend >> (8u * (~addr & 3u))) & 0xffu;

         pixel.r = value;
         pixel.g = value;
         pixel.b = value;
         pixel.a = 7u * (value & 1u);
#endif
      }
      else if (cycle_type == CYCLE_TYPE_COPY)
      {
         bool coverage = (coverage_bits & 0x80u) != 0u;
         // No idea why this would differ based on pixel type, but hey ...
#if COLOR_BPP == 16
         bool alpha_fail = PRIMITIVE_ALPHATEST(flags) && combined.a == 0;
#elif COLOR_BPP == 8
         int compare = PRIMITIVE_ALPHA_NOISE(flags) ? noise8(0) : int(rdpprim.blend_color & 0xffu);
         bool alpha_fail = PRIMITIVE_ALPHATEST(flags) && (combined.a < compare);
#else
         // Copy doesn't seem to be supposed to work in 32bpp mode.
         bool alpha_fail = !PRIMITIVE_ALPHATEST(flags);
         combined = ivec4(0);
#endif
         if (coverage && !alpha_fail)
         {
            // Not sure if this how to deal with coverage in copy pipe, but seems to work for now.
            pixel = uvec4(combined.rgb, combined.a >> 5);
         }
      }
      else
      {
#if Z_BUFFER
         if (z_compare(flags, z, dz, pixel_z, overflow, farther))
#endif
         {
            bool blend_en;
            if (blender(flags,
                     pixel, uvec2(post_alpha_coverage, coverage_bits),
                     rdpprim.fill_color_blend, rdpprim.blend_color, work.desc[tile].fog_color,
                     shadea, combined,
                     overflow, farther, blend_en,
                     cycle_type == CYCLE_TYPE_2 ? 2u : 0u))
            {
#if Z_BUFFER
               if (PRIMITIVE_Z_UPDATE(flags))
               {
                  pixel_z.x = z_encode(z);
                  pixel_z.y = uint(dzenc);
               }
#endif

               uint cvg_mode = PRIMITIVE_CVG_MODE(flags);
               if (cvg_mode == CVG_MODE_CLAMP)
               {
                  // Bizarro mode be here :D
                  if (blend_en)
                     pixel.a = clamp(newcvg, 0u, 7u);
                  else
                     pixel.a = (post_alpha_coverage - 1u) & 7u;
               }
               else if (cvg_mode == CVG_MODE_WRAP)
                  pixel.a = newcvg & 7u;
               else if (cvg_mode == CVG_MODE_ZAP)
                  pixel.a = 7u;
               // Don't update coverage for SAVE.
            }
         }
      }


#if COLOR_BPP == 32
      // We already have full precision.
#elif COLOR_BPP == 16
      // Chop off lower bits.
      pixel.rgb &= ~7u;
#elif COLOR_BPP == 8
      // In 8-bpp mode, duplicate R to G and B.
      pixel.gb = pixel.rr;
      // Coverage in 8-bpp always seems to be max.
      pixel.a = 7u;
#endif

#if COLOR_DEPTH_ALIAS
      // In this mode, we're writing to color along with read-only depth testing.
      // After writing color, make sure to re-decode depth.
      pixel_z = unpack_depth((pixel.r << 10u) | (pixel.g << 5u) | (pixel.b << 0u) | (pixel.a));
#endif
   } while (node.y != -1u);

   // Write back framebuffer.
#if COLOR_BPP == 32
   // Coverage bits are written in alpha.
   pixel.a <<= 5u;
   framebuffer.data[framebuffer_offset] = pack_rgba8(pixel);
#elif COLOR_BPP == 16
   framebuffer.data[framebuffer_offset] = (pixel.r << 10u) | (pixel.g << 5u) | (pixel.b << 0u) | (pixel.a);
#elif COLOR_BPP == 8
   // In 8bpp mode, write out the red channel.
   // We need to pass down coverage bits here as well, but whatever.
   framebuffer.data[framebuffer_offset] = ((pixel.r & 0xffu) << 3u) | ((pixel.r & 1u) * 7u);
#endif

#if Z_BUFFER && !COLOR_DEPTH_ALIAS
   framebuffer_depth.data[framebuffer_offset] = pack_depth(pixel_z);
#endif
}


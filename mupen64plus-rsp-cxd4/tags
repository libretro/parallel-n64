!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACC_H	vu/vu.h	59;"	d
ACC_L	vu/vu.h	57;"	d
ACC_M	vu/vu.h	58;"	d
ALIGNED	rsp.h	22;"	d
ALIGNED	rsp.h	25;"	d
ARCH_MIN_SSE2	rsp.h	29;"	d
ARCH_MIN_SSE2	rsp.h	36;"	d
B	su.h	/^    unsigned char B[4];$/;"	m	union:__anon3
B	vu/shuffle.h	108;"	d
BASE_OFF	su.h	42;"	d
BASE_OFF	su.h	44;"	d
BES	su.h	75;"	d
CALL	Rsp_#1.1.h	112;"	d
CALL	Rsp_#1.1.h	115;"	d
CFC2	su.h	/^static void CFC2(int rt, int rd)$/;"	f
CFG_HLE_AUD	config.h	34;"	d
CFG_HLE_GFX	config.h	33;"	d
CFG_HLE_JPG	config.h	36;"	d
CFG_HLE_VID	config.h	35;"	d
CFG_MEND_SEMAPHORE_LOCK	config.h	63;"	d
CFG_QUEUE_E_DMEM	config.h	50;"	d
CFG_QUEUE_E_DRAM	config.h	49;"	d
CFG_QUEUE_E_IMEM	config.h	51;"	d
CFG_TRACE_RSP_REGISTERS	config.h	64;"	d
CFG_WAIT_FOR_CPU_HOST	config.h	62;"	d
CONFIG_API_VERSION	rsp.c	36;"	d	file:
CONFIG_PARAM_VERSION	rsp.c	37;"	d	file:
COP2_C2	vu/vu.h	/^static void (*COP2_C2[64])(int, int, int, int) = {$/;"	v
CR	rsp.c	/^RCPREG* CR[16];$/;"	v
CTC2	su.h	/^static void CTC2(int rt, int rd)$/;"	f
CheckInterrupts	Rsp_#1.1.h	/^    void (*CheckInterrupts)(void);$/;"	m	struct:__anon5
DEBUG_INFO	Rsp_#1.1.h	/^} DEBUG_INFO;$/;"	t	typeref:struct:__anon6
DMEM	Rsp_#1.1.h	/^    unsigned char *DMEM;$/;"	m	struct:__anon5
DPC_BUFBUSY_REG	Rsp_#1.1.h	/^    RCPREG *DPC_BUFBUSY_REG;$/;"	m	struct:__anon5
DPC_CLOCK_REG	Rsp_#1.1.h	/^    RCPREG *DPC_CLOCK_REG;$/;"	m	struct:__anon5
DPC_CURRENT_REG	Rsp_#1.1.h	/^    RCPREG *DPC_CURRENT_REG;$/;"	m	struct:__anon5
DPC_END_REG	Rsp_#1.1.h	/^    RCPREG *DPC_END_REG;$/;"	m	struct:__anon5
DPC_PIPEBUSY_REG	Rsp_#1.1.h	/^    RCPREG *DPC_PIPEBUSY_REG;$/;"	m	struct:__anon5
DPC_START_REG	Rsp_#1.1.h	/^    RCPREG *DPC_START_REG;$/;"	m	struct:__anon5
DPC_STATUS_REG	Rsp_#1.1.h	/^    RCPREG *DPC_STATUS_REG;$/;"	m	struct:__anon5
DPC_TMEM_REG	Rsp_#1.1.h	/^    RCPREG *DPC_TMEM_REG;$/;"	m	struct:__anon5
DPH	vu/divrom.h	/^static int DPH;$/;"	v
DebugMessage	rsp.c	/^static void DebugMessage(int level, const char *message, ...)$/;"	f	file:
DivIn	vu/divrom.h	/^static int DivIn = 0; \/* buffered numerator of division read from vector file *\/$/;"	v
DivOut	vu/divrom.h	/^static int DivOut = 0; \/* global division result set by VRCP\/VRCPL\/VRSQ\/VRSQH *\/$/;"	v
EMULATE_STATIC_PC	config.h	24;"	d
EMULATE_STATIC_PC	rsp.h	64;"	d
ENDIAN	su.h	71;"	d
ENDIAN	su.h	73;"	d
EXPORT	Rsp_#1.1.h	111;"	d
EXPORT	Rsp_#1.1.h	114;"	d
EXTERN_COMMAND_LIST_ABI	config.h	21;"	d
EXTERN_COMMAND_LIST_GBI	config.h	20;"	d
Enter_BPoint_Window	Rsp_#1.1.h	/^    void (*Enter_BPoint_Window)(void);$/;"	m	struct:__anon6
Enter_Memory_Window	Rsp_#1.1.h	/^    void (*Enter_Memory_Window)(void);$/;"	m	struct:__anon6
Enter_R4300i_Commands_Window	Rsp_#1.1.h	/^    void (*Enter_R4300i_Commands_Window)(void);$/;"	m	struct:__anon6
Enter_R4300i_Register_Window	Rsp_#1.1.h	/^    void (*Enter_R4300i_Register_Window)(void);$/;"	m	struct:__anon6
Enter_RSP_Commands_Window	Rsp_#1.1.h	/^    void (*Enter_RSP_Commands_Window)(void);$/;"	m	struct:__anon6
FIT_IMEM	rsp.c	47;"	d	file:
GetDllInfo	rsp.c	/^EXPORT void CALL GetDllInfo(PLUGIN_INFO *PluginInfo)$/;"	f
H	su.h	/^    unsigned short H[2];$/;"	m	union:__anon3
HDC	Rsp_#1.1.h	/^typedef struct HDC__ *HDC;$/;"	t	typeref:struct:HDC__
HDC__	Rsp_#1.1.h	/^struct HDC__ {int unused;};$/;"	s
HES	su.h	76;"	d
HI	vu/vu.h	47;"	d
HINSTANCE	Rsp_#1.1.h	/^typedef struct HINSTANCE__ *HINSTANCE;$/;"	t	typeref:struct:HINSTANCE__
HINSTANCE__	Rsp_#1.1.h	/^struct HINSTANCE__ {int unused;};$/;"	s
HMENU	Rsp_#1.1.h	/^typedef struct HMENU__ *HMENU;$/;"	t	typeref:struct:HMENU__
HMENU__	Rsp_#1.1.h	/^struct HMENU__ {int unused;};$/;"	s
HWND	Rsp_#1.1.h	/^typedef struct HWND__ *HWND;$/;"	t	typeref:struct:HWND__
HWND__	Rsp_#1.1.h	/^struct HWND__ {int unused;};$/;"	s
IMEM	Rsp_#1.1.h	/^    unsigned char *IMEM;$/;"	m	struct:__anon5
LBV	su.h	/^static void LBV(int vt, int element, int offset, int base)$/;"	f
LDV	su.h	/^static void LDV(int vt, int element, int offset, int base)$/;"	f
LFV	su.h	/^static void LFV(int vt, int element, int offset, int base)$/;"	f
LHV	su.h	/^static void LHV(int vt, int element, int offset, int base)$/;"	f
LINK_OFF	su.h	50;"	d
LLV	su.h	/^static void LLV(int vt, int element, int offset, int base)$/;"	f
LO	vu/vu.h	49;"	d
LPV	su.h	/^static void LPV(int vt, int element, int offset, int base)$/;"	f
LQV	su.h	/^static void LQV(int vt, int element, int offset, int base)$/;"	f
LRV	su.h	/^static void LRV(int vt, int element, int offset, int base)$/;"	f
LSV	su.h	/^static void LSV(int vt, int element, int offset, int base)$/;"	f
LTV	su.h	/^static void LTV(int vt, int element, int offset, int base)$/;"	f
LUV	su.h	/^static void LUV(int vt, int element, int offset, int base)$/;"	f
LWC2_op	su.h	/^static void (*LWC2_op[1 << 5])(int, int, signed, int) = {$/;"	v
M64P_PLUGIN_PROTOTYPES	Rsp_#1.1.h	104;"	d
MASK_SA	su.h	63;"	d
MASK_SA	su.h	66;"	d
MASK_XOR	vu/vabs.h	31;"	d
MAX_DRAM_ADDR	rsp.h	43;"	d
MAX_DRAM_DMA_ADDR	rsp.h	44;"	d
MD	vu/vu.h	48;"	d
MES	su.h	77;"	d
MFC0_count	rsp.h	/^static short MFC0_count[32];$/;"	v
MFC2	su.h	/^static void MFC2(int rt, int vs, int e)$/;"	f
MF_SP_STATUS_TIMEOUT	rsp.c	/^int MF_SP_STATUS_TIMEOUT;$/;"	v
MINIMUM_MESSAGE_PRIORITY	config.h	19;"	d
MI_INTR_REG	Rsp_#1.1.h	/^    RCPREG *MI_INTR_REG;$/;"	m	struct:__anon5
MTC0	su.h	/^static void (*MTC0[16])(int) = {$/;"	v
MTC2	su.h	/^static void MTC2(int rt, int vd, int e)$/;"	f
MT_CMD_CLOCK	su.h	/^static void MT_CMD_CLOCK(int rt)$/;"	f
MT_CMD_END	su.h	/^static void MT_CMD_END(int rt)$/;"	f
MT_CMD_START	su.h	/^static void MT_CMD_START(int rt)$/;"	f
MT_CMD_STATUS	su.h	/^static void MT_CMD_STATUS(int rt)$/;"	f
MT_DMA_CACHE	su.h	/^static void MT_DMA_CACHE(int rt)$/;"	f
MT_DMA_DRAM	su.h	/^static void MT_DMA_DRAM(int rt)$/;"	f
MT_DMA_READ_LENGTH	su.h	/^static void MT_DMA_READ_LENGTH(int rt)$/;"	f
MT_DMA_WRITE_LENGTH	su.h	/^static void MT_DMA_WRITE_LENGTH(int rt)$/;"	f
MT_READ_ONLY	su.h	/^static void MT_READ_ONLY(int rt)$/;"	f
MT_SP_RESERVED	su.h	/^static void MT_SP_RESERVED(int rt)$/;"	f
MT_SP_STATUS	su.h	/^static void MT_SP_STATUS(int rt)$/;"	f
MemoryBswaped	Rsp_#1.1.h	/^    int MemoryBswaped;    \/* If this is set to TRUE, then the memory has been$/;"	m	struct:__anon5
MemoryBswaped	Rsp_#1.1.h	/^    int MemoryBswaped;  \/* a normal BYTE array where the memory has been pre-$/;"	m	struct:__anon4
MovIn	vu/divrom.h	/^static int MovIn; \/* We do not emulate this register (obsolete, for VMOV). *\/$/;"	v
N	vu/vu.h	31;"	d
NOINLINE	rsp.h	21;"	d
NOINLINE	rsp.h	24;"	d
NUMBER_OF_CP0_REGISTERS	su.h	47;"	d
Name	Rsp_#1.1.h	/^    char Name[100];      \/* Name of the DLL *\/$/;"	m	struct:__anon4
NormalMemory	Rsp_#1.1.h	/^    int NormalMemory;   \/* a normal BYTE array *\/ $/;"	m	struct:__anon4
PC	rsp.c	/^static int PC;$/;"	v	file:
PLUGIN_INFO	Rsp_#1.1.h	/^} PLUGIN_INFO;$/;"	t	typeref:struct:__anon4
PLUGIN_TYPE_AUDIO	Rsp_#1.1.h	10;"	d
PLUGIN_TYPE_CONTROLLER	Rsp_#1.1.h	11;"	d
PLUGIN_TYPE_GFX	Rsp_#1.1.h	9;"	d
PLUGIN_TYPE_RSP	Rsp_#1.1.h	8;"	d
PluginShutdown	rsp.c	/^EXPORT m64p_error CALL PluginShutdown(void)$/;"	f
PluginStartup	rsp.c	/^EXPORT m64p_error CALL PluginStartup(m64p_dynlib_handle CoreLibHandle, void *Context,$/;"	f
ProcessAList	Rsp_#1.1.h	/^    void (*ProcessAList)(void);$/;"	m	struct:__anon5
ProcessDList	Rsp_#1.1.h	/^    void (*ProcessDList)(void);$/;"	m	struct:__anon5
ProcessRdpList	Rsp_#1.1.h	/^    void (*ProcessRdpList)(void);$/;"	m	struct:__anon5
RCPREG	Rsp_#1.1.h	/^typedef uint32_t RCPREG;$/;"	t
RCPREG	Rsp_#1.1.h	/^typedef unsigned int RCPREG; \/* ANSI approximation of 32-bit size *\/$/;"	t
RCPREG	Rsp_#1.1.h	/^typedef unsigned long RCPREG; \/* necessary for 16-bit targets *\/$/;"	t
RDRAM	Rsp_#1.1.h	/^    unsigned char *RDRAM;$/;"	m	struct:__anon5
RSP	rsp.h	/^RSP_INFO RSP;$/;"	v
RSP_CXD4_VERSION	rsp.c	31;"	d	file:
RSP_DUMP_H__	rsp_dump.h	2;"	d
RSP_INFO	Rsp_#1.1.h	/^} RSP_INFO;$/;"	t	typeref:struct:__anon5
RSP_PLUGIN_API_VERSION	rsp.c	35;"	d	file:
R_VCF	su.h	/^static unsigned short (*R_VCF[32])(void) = {$/;"	v
RomOpen	rsp.c	/^EXPORT int CALL RomOpen(void)$/;"	f
SB	su.h	/^    signed char SB[4];$/;"	m	union:__anon3
SBV	su.h	/^static void SBV(int vt, int element, int offset, int base)$/;"	f
SDV	su.h	/^static void SDV(int vt, int element, int offset, int base)$/;"	f
SE	su.h	81;"	d
SEMAPHORE_LOCK_CORRECTIONS	config.h	22;"	d
SEMIFRAC	vu/vmulf.h	25;"	d
SEMIFRAC	vu/vmulu.h	25;"	d
SET_PC	su.h	55;"	d
SET_PC	su.h	57;"	d
SFV	su.h	/^static void SFV(int vt, int element, int offset, int base)$/;"	f
SH	su.h	/^    signed short SH[2];$/;"	m	union:__anon3
SHUFFLE	vu/shuffle.h	115;"	d
SHUFFLE_VECTOR	vu/shuffle.h	/^INLINE static void SHUFFLE_VECTOR(short* VD, short* VT, const int e)$/;"	f
SHV	su.h	/^static void SHV(int vt, int element, int offset, int base)$/;"	f
SIGNED_CLAMP_ADD	vu/clamp.h	/^static INLINE void SIGNED_CLAMP_ADD(short* VD, short* VS, short* VT)$/;"	f
SIGNED_CLAMP_AL	vu/clamp.h	/^static INLINE void SIGNED_CLAMP_AL(short* VD)$/;"	f
SIGNED_CLAMP_AM	vu/clamp.h	/^static INLINE void SIGNED_CLAMP_AM(short* VD)$/;"	f
SIGNED_CLAMP_SUB	vu/clamp.h	/^static INLINE void SIGNED_CLAMP_SUB(short* VD, short* VS, short* VT)$/;"	f
SLOT_OFF	su.h	49;"	d
SLV	su.h	/^static void SLV(int vt, int element, int offset, int base)$/;"	f
SPECIAL	rsp.c	/^static INLINE unsigned SPECIAL(uint32_t inst, uint32_t PC)$/;"	f	file:
SPV	su.h	/^static void SPV(int vt, int element, int offset, int base)$/;"	f
SP_CP0_MF	su.h	/^static void SP_CP0_MF(int rt, int rd)$/;"	f
SP_DIV_PRECISION_CURRENT	vu/divrom.h	/^    SP_DIV_PRECISION_CURRENT$/;"	e	enum:__anon2
SP_DIV_PRECISION_DOUBLE	vu/divrom.h	/^    SP_DIV_PRECISION_DOUBLE = 1,$/;"	e	enum:__anon2
SP_DIV_PRECISION_SINGLE	vu/divrom.h	/^    SP_DIV_PRECISION_SINGLE = 0,$/;"	e	enum:__anon2
SP_DIV_SQRT_NO	vu/divrom.h	/^    SP_DIV_SQRT_NO,$/;"	e	enum:__anon1
SP_DIV_SQRT_YES	vu/divrom.h	/^    SP_DIV_SQRT_YES$/;"	e	enum:__anon1
SP_DMA_BUSY_REG	Rsp_#1.1.h	/^    RCPREG *SP_DMA_BUSY_REG;$/;"	m	struct:__anon5
SP_DMA_FULL_REG	Rsp_#1.1.h	/^    RCPREG *SP_DMA_FULL_REG;$/;"	m	struct:__anon5
SP_DRAM_ADDR_REG	Rsp_#1.1.h	/^    RCPREG *SP_DRAM_ADDR_REG;$/;"	m	struct:__anon5
SP_MEM_ADDR_REG	Rsp_#1.1.h	/^    RCPREG *SP_MEM_ADDR_REG;$/;"	m	struct:__anon5
SP_PC_REG	Rsp_#1.1.h	/^    RCPREG *SP_PC_REG; \/* This was SUPPOSED to be defined after the next. *\/$/;"	m	struct:__anon5
SP_RD_LEN_REG	Rsp_#1.1.h	/^    RCPREG *SP_RD_LEN_REG;$/;"	m	struct:__anon5
SP_SEMAPHORE_REG	Rsp_#1.1.h	/^    RCPREG *SP_SEMAPHORE_REG;$/;"	m	struct:__anon5
SP_STATUS_BROKE	rsp.h	68;"	d
SP_STATUS_DMA_BUSY	rsp.h	69;"	d
SP_STATUS_DMA_FULL	rsp.h	70;"	d
SP_STATUS_HALT	rsp.h	67;"	d
SP_STATUS_INTR_BREAK	rsp.h	73;"	d
SP_STATUS_IO_FULL	rsp.h	71;"	d
SP_STATUS_REG	Rsp_#1.1.h	/^    RCPREG *SP_STATUS_REG;$/;"	m	struct:__anon5
SP_STATUS_SIG0	rsp.h	74;"	d
SP_STATUS_SIG1	rsp.h	75;"	d
SP_STATUS_SIG2	rsp.h	76;"	d
SP_STATUS_SIG3	rsp.h	77;"	d
SP_STATUS_SIG4	rsp.h	78;"	d
SP_STATUS_SIG5	rsp.h	79;"	d
SP_STATUS_SIG6	rsp.h	80;"	d
SP_STATUS_SIG7	rsp.h	81;"	d
SP_STATUS_SSTEP	rsp.h	72;"	d
SP_WR_LEN_REG	Rsp_#1.1.h	/^    RCPREG *SP_WR_LEN_REG;$/;"	m	struct:__anon5
SQV	su.h	/^static void SQV(int vt, int element, int offset, int base)$/;"	f
SR	su.h	/^static int SR[32];$/;"	v
SRV	su.h	/^static void SRV(int vt, int element, int offset, int base)$/;"	f
SR_B	su.h	79;"	d
SR_S	su.h	80;"	d
SR_temp	su.h	/^} SR_temp;$/;"	v	typeref:union:__anon3
SSE2_SHUFFLE_16	vu/shuffle.h	/^static __m128i (*SSE2_SHUFFLE_16[16])(__m128i) = {$/;"	v
SSV	su.h	/^static void SSV(int vt, int element, int offset, int base)$/;"	f
STV	su.h	/^static void STV(int vt, int element, int offset, int base)$/;"	f
SUV	su.h	/^static void SUV(int vt, int element, int offset, int base)$/;"	f
SWC2_op	su.h	/^static void (*SWC2_op[1 << 5])(int, int, signed, int) = {$/;"	v
SWV	su.h	/^static void SWV(int vt, int element, int offset, int base)$/;"	f
ShowCFB	Rsp_#1.1.h	/^    void (*ShowCFB)(void);$/;"	m	struct:__anon5
Type	Rsp_#1.1.h	/^    unsigned short Type;           \/* Set to PLUGIN_TYPE_RSP *\/$/;"	m	struct:__anon4
ULW	su.h	/^void ULW(int rd, uint32_t addr)$/;"	f
UNSIGNED_CLAMP	vu/clamp.h	/^static INLINE void UNSIGNED_CLAMP(short* VD)$/;"	f
USW	su.h	/^void USW(int rs, uint32_t addr)$/;"	f
UpdateBreakPoints	Rsp_#1.1.h	/^    void (*UpdateBreakPoints)(void);$/;"	m	struct:__anon6
UpdateMemory	Rsp_#1.1.h	/^    void (*UpdateMemory)(void);$/;"	m	struct:__anon6
UpdateR4300iRegisters	Rsp_#1.1.h	/^    void (*UpdateR4300iRegisters)(void);$/;"	m	struct:__anon6
VABS	vu/vabs.h	/^static void VABS(int vd, int vs, int vt, int e)$/;"	f
VACC	vu/vu.h	/^ALIGNED static short VACC[3][N];$/;"	v
VACC_H	vu/vu.h	55;"	d
VACC_L	vu/vu.h	53;"	d
VACC_M	vu/vu.h	54;"	d
VADD	vu/vadd.h	/^static void VADD(int vd, int vs, int vt, int e)$/;"	f
VADDC	vu/vaddc.h	/^static void VADDC(int vd, int vs, int vt, int e)$/;"	f
VAND	vu/vand.h	/^static void VAND(int vd, int vs, int vt, int e)$/;"	f
VCC	vu/cf.h	/^unsigned short VCC;$/;"	v
VCE	vu/cf.h	/^unsigned char VCE;$/;"	v
VCH	vu/vch.h	/^static void VCH(int vd, int vs, int vt, int e)$/;"	f
VCL	vu/vcl.h	/^static void VCL(int vd, int vs, int vt, int e)$/;"	f
VCO	vu/cf.h	/^unsigned short VCO;$/;"	v
VCR	vu/vcr.h	/^static void VCR(int vd, int vs, int vt, int e)$/;"	f
VEQ	vu/veq.h	/^static void VEQ(int vd, int vs, int vt, int e)$/;"	f
VERSION_PRINTF_SPLIT	rsp.c	45;"	d	file:
VGE	vu/vge.h	/^static void VGE(int vd, int vs, int vt, int e)$/;"	f
VLT	vu/vlt.h	/^static void VLT(int vd, int vs, int vt, int e)$/;"	f
VMACF	vu/vmacf.h	/^static void VMACF(int vd, int vs, int vt, int e)$/;"	f
VMACQ	vu/vmacq.h	/^static void VMACQ(int vd, int vs, int vt, int e)$/;"	f
VMACU	vu/vmacu.h	/^static void VMACU(int vd, int vs, int vt, int e)$/;"	f
VMADH	vu/vmadh.h	/^static void VMADH(int vd, int vs, int vt, int e)$/;"	f
VMADL	vu/vmadl.h	/^static void VMADL(int vd, int vs, int vt, int e)$/;"	f
VMADM	vu/vmadm.h	/^static void VMADM(int vd, int vs, int vt, int e)$/;"	f
VMADN	vu/vmadn.h	/^static void VMADN(int vd, int vs, int vt, int e)$/;"	f
VMOV	vu/vmov.h	/^static void VMOV(int vd, int de, int vt, int e)$/;"	f
VMRG	vu/vmrg.h	/^static void VMRG(int vd, int vs, int vt, int e)$/;"	f
VMUDH	vu/vmudh.h	/^static void VMUDH(int vd, int vs, int vt, int e)$/;"	f
VMUDL	vu/vmudl.h	/^static void VMUDL(int vd, int vs, int vt, int e)$/;"	f
VMUDM	vu/vmudm.h	/^static void VMUDM(int vd, int vs, int vt, int e)$/;"	f
VMUDN	vu/vmudn.h	/^static void VMUDN(int vd, int vs, int vt, int e)$/;"	f
VMULF	vu/vmulf.h	/^static void VMULF(int vd, int vs, int vt, int e)$/;"	f
VMULU	vu/vmulu.h	/^static void VMULU(int vd, int vs, int vt, int e)$/;"	f
VNAND	vu/vnand.h	/^static void VNAND(int vd, int vs, int vt, int e)$/;"	f
VNE	vu/vne.h	/^static void VNE(int vd, int vs, int vt, int e)$/;"	f
VNOP	vu/vnop.h	/^static void VNOP(int vd, int vs, int vt, int e)$/;"	f
VNOR	vu/vnor.h	/^static void VNOR(int vd, int vs, int vt, int e)$/;"	f
VNXOR	vu/vnxor.h	/^static void VNXOR(int vd, int vs, int vt, int e)$/;"	f
VOR	vu/vor.h	/^static void VOR(int vd, int vs, int vt, int e)$/;"	f
VR	vu/vu.h	/^ALIGNED short VR[32][N];$/;"	v
VRCP	vu/vrcp.h	/^static void VRCP(int vd, int de, int vt, int e)$/;"	f
VRCPH	vu/vrcph.h	/^static void VRCPH(int vd, int de, int vt, int e)$/;"	f
VRCPL	vu/vrcpl.h	/^static void VRCPL(int vd, int de, int vt, int e)$/;"	f
VRSQ	vu/vrsq.h	/^static void VRSQ(int vd, int de, int vt, int e)$/;"	f
VRSQH	vu/vrsqh.h	/^static void VRSQH(int vd, int de, int vt, int e)$/;"	f
VRSQL	vu/vrsql.h	/^static void VRSQL(int vd, int de, int vt, int e)$/;"	f
VR_A	su.h	338;"	d
VR_B	su.h	332;"	d
VR_S	su.h	347;"	d
VR_U	su.h	339;"	d
VSAR	vu/vsaw.h	/^static void VSAR(int vd, int vs, int vt, int e)$/;"	f
VSAW	vu/vsaw.h	/^static void VSAW(int vd, int vs, int vt, int e)$/;"	f
VSUB	vu/vsub.h	/^static void VSUB(int vd, int vs, int vt, int e)$/;"	f
VSUBC	vu/vsubc.h	/^static void VSUBC(int vd, int vs, int vt, int e)$/;"	f
VXOR	vu/vxor.h	/^static void VXOR(int vd, int vs, int vt, int e)$/;"	f
Version	Rsp_#1.1.h	/^    unsigned short Version;        \/* Should be set to 0x0101 *\/$/;"	m	struct:__anon4
WAIT_FOR_CPU_HOST	config.h	23;"	d
WES	su.h	78;"	d
W_VCF	su.h	/^static void (*W_VCF[32])(unsigned short) = {$/;"	v
ZE	su.h	82;"	d
_CF_H	vu/cf.h	15;"	d
_CLAMP_H	vu/clamp.h	15;"	d
_CXD4_CONFIG_H	config.h	15;"	d
_DIVROM_H	vu/divrom.h	15;"	d
_RSP_H_	rsp.h	15;"	d
_SHUFFLE_H	vu/shuffle.h	15;"	d
_SU_H	su.h	16;"	d
_VU_H	vu/vu.h	16;"	d
__RSP_1_1_H__	Rsp_#1.1.h	2;"	d
_mm_cmpgt_epu16	vu/vu.h	23;"	d
_mm_cmple_epu16	vu/vu.h	21;"	d
_mm_cmplt_epu16	vu/vu.h	25;"	d
_mm_mullo_epu16	vu/vu.h	27;"	d
byte	rsp.h	/^typedef unsigned char byte;$/;"	t
clip	vu/cf.h	/^short clip[8]; \/* $vcc:  high byte (clip tests:  VCL, VCH, VCR) *\/$/;"	v
clr_bi	vu/vsub.h	/^INLINE static void clr_bi(short* VD, short* VS, short* VT)$/;"	f
clr_ci	vu/vadd.h	/^INLINE static void clr_ci(short* VD, short* VS, short* VT)$/;"	f
co	vu/cf.h	/^short co[8]; \/* $vco:  low byte "carry\/borrow in\/out" *\/$/;"	v
comp	vu/cf.h	/^short comp[8]; \/* $vcc:  low byte (VEQ, VNE, VLT, VGE, VCL, VCH, VCR) *\/$/;"	v
cxd4DoRspCycles	rsp.c	/^EXPORT unsigned int CALL cxd4DoRspCycles(unsigned int cycles)$/;"	f
cxd4InitiateRSP	rsp.c	/^EXPORT void CALL cxd4InitiateRSP(RSP_INFO Rsp_Info, unsigned int *CycleCount)$/;"	f
cxd4PluginGetVersion	rsp.c	/^EXPORT m64p_error CALL cxd4PluginGetVersion(m64p_plugin_type *PluginType, int *PluginVersion, int *APIVersion, const char **PluginNamePtr, int *Capabilities)$/;"	f
cxd4RomClosed	rsp.c	/^EXPORT void CALL cxd4RomClosed(void)$/;"	f
div_ROM	vu/divrom.h	/^static const unsigned short div_ROM[1024] = {$/;"	v
do_abs	vu/vabs.h	/^INLINE static void do_abs(short* VD, short* VS, short* VT)$/;"	f
do_and	vu/vand.h	/^INLINE void do_and(short* VD, short* VS, short* VT)$/;"	f
do_ch	vu/vch.h	/^INLINE static void do_ch(short* VD, short* VS, short* VT)$/;"	f
do_cl	vu/vcl.h	/^INLINE static void do_cl(short* VD, short* VS, short* VT)$/;"	f
do_cr	vu/vcr.h	/^INLINE static void do_cr(short* VD, short* VS, short* VT)$/;"	f
do_div	vu/divrom.h	/^INLINE static void do_div(int data, int sqrt, int precision)$/;"	f
do_eq	vu/veq.h	/^INLINE static void do_eq(short* VD, short* VS, short* VT)$/;"	f
do_ge	vu/vge.h	/^INLINE static void do_ge(short* VD, short* VS, short* VT)$/;"	f
do_lt	vu/vlt.h	/^INLINE static void do_lt(short* VD, short* VS, short* VT)$/;"	f
do_macf	vu/vmacf.h	/^INLINE static void do_macf(short* VD, short* VS, short* VT)$/;"	f
do_macu	vu/vmacu.h	/^INLINE static void do_macu(short* VD, short* VS, short* VT)$/;"	f
do_madh	vu/vmadh.h	/^INLINE static void do_madh(short* VD, short* VS, short* VT)$/;"	f
do_madl	vu/vmadl.h	/^INLINE static void do_madl(short* VD, short* VS, short* VT)$/;"	f
do_madm	vu/vmadm.h	/^INLINE static void do_madm(short* VD, short* VS, short* VT)$/;"	f
do_madn	vu/vmadn.h	/^INLINE static void do_madn(short* VD, short* VS, short* VT)$/;"	f
do_mrg	vu/vmrg.h	/^INLINE static void do_mrg(short* VD, short* VS, short* VT)$/;"	f
do_mudh	vu/vmudh.h	/^INLINE static void do_mudh(short* VD, short* VS, short* VT)$/;"	f
do_mudl	vu/vmudl.h	/^INLINE static void do_mudl(short* VD, short* VS, short* VT)$/;"	f
do_mudm	vu/vmudm.h	/^INLINE static void do_mudm(short* VD, short* VS, short* VT)$/;"	f
do_mudn	vu/vmudn.h	/^INLINE static void do_mudn(short* VD, short* VS, short* VT)$/;"	f
do_mulf	vu/vmulf.h	/^INLINE static void do_mulf(short* VD, short* VS, short* VT)$/;"	f
do_mulu	vu/vmulu.h	/^INLINE static void do_mulu(short* VD, short* VS, short* VT)$/;"	f
do_nand	vu/vnand.h	/^INLINE void do_nand(short* VD, short* VS, short* VT)$/;"	f
do_ne	vu/vne.h	/^INLINE static void do_ne(short* VD, short* VS, short* VT)$/;"	f
do_nor	vu/vnor.h	/^INLINE void do_nor(short* VD, short* VS, short* VT)$/;"	f
do_nxor	vu/vnxor.h	/^INLINE void do_nxor(short* VD, short* VS, short* VT)$/;"	f
do_or	vu/vor.h	/^INLINE void do_or(short* VD, short* VS, short* VT)$/;"	f
do_xor	vu/vxor.h	/^INLINE void do_xor(short* VD, short* VS, short* VT)$/;"	f
ei	vu/shuffle.h	/^static const int ei[16][8] = {$/;"	v
get_VCC	vu/cf.h	/^unsigned short get_VCC(void)$/;"	f
get_VCE	vu/cf.h	/^unsigned char get_VCE(void)$/;"	f
get_VCO	vu/cf.h	/^unsigned short get_VCO(void)$/;"	f
hInst	Rsp_#1.1.h	/^    HINSTANCE hInst;$/;"	m	struct:__anon5
hash64	rsp_dump.cpp	/^static inline uint64_t hash64(const void *data_, size_t size)$/;"	f	file:
l_ConfigRsp	rsp.c	/^static m64p_handle l_ConfigRsp;$/;"	v	file:
l_DebugCallContext	rsp.c	/^static void *l_DebugCallContext = NULL;$/;"	v	file:
l_DebugCallback	rsp.c	/^static void (*l_DebugCallback)(void *, int, const char *) = NULL;$/;"	v	file:
l_PluginInit	rsp.c	/^static int l_PluginInit = 0;$/;"	v	file:
lwc_res	su.h	/^NOINLINE static void lwc_res(int vt, int element, signed offset, int base)$/;"	f
merge	vu/clamp.h	/^static INLINE void merge(short* VD, short* cmp, short* pass, short* fail)$/;"	f
message	rsp.h	/^NOINLINE void message(const char* body, int priority)$/;"	f
ne	vu/cf.h	/^short ne[8]; \/* $vco:  high byte "NOTEQUAL" *\/$/;"	v
res_M	vu/vu.h	/^static void res_M(int vd, int vs, int vt, int e)$/;"	f
res_S	su.h	/^NOINLINE static void res_S(void)$/;"	f
res_V	vu/vu.h	/^static void res_V(int vd, int vs, int vt, int e)$/;"	f
rsp_conf	rsp.c	/^unsigned char rsp_conf[32];$/;"	v
rsp_dump_imem	rsp_dump.cpp	/^void rsp_dump_imem(const void *imem, size_t size)$/;"	f
rsp_imem_invalidate	su.h	/^static int rsp_imem_invalidate = 1;$/;"	v
run_task	rsp.c	/^NOINLINE void run_task(void)$/;"	f
run_task_opcode	rsp.c	/^static unsigned int run_task_opcode(uint32_t inst, const int opcode)$/;"	f	file:
rwR_VCE	su.h	/^unsigned short rwR_VCE(void)$/;"	f
rwW_VCE	su.h	/^void rwW_VCE(unsigned short VCE)$/;"	f
seen_ucodes	rsp_dump.cpp	/^static std::unordered_set<uint64_t> seen_ucodes;$/;"	v	file:
set_VCC	vu/cf.h	/^void set_VCC(unsigned short VCC)$/;"	f
set_VCE	vu/cf.h	/^void set_VCE(unsigned char VCE)$/;"	f
set_VCO	vu/cf.h	/^void set_VCO(unsigned short VCO)$/;"	f
set_bo	vu/vsubc.h	/^INLINE static void set_bo(short* VD, short* VS, short* VT)$/;"	f
set_co	vu/vaddc.h	/^INLINE static void set_co(short* VD, short* VS, short* VT)$/;"	f
shuffle_0h	vu/shuffle.h	/^static __m128i shuffle_0h(__m128i xmm)$/;"	f
shuffle_0q	vu/shuffle.h	/^static __m128i shuffle_0q(__m128i xmm)$/;"	f
shuffle_0w	vu/shuffle.h	/^static __m128i shuffle_0w(__m128i xmm)$/;"	f
shuffle_1h	vu/shuffle.h	/^static __m128i shuffle_1h(__m128i xmm)$/;"	f
shuffle_1q	vu/shuffle.h	/^static __m128i shuffle_1q(__m128i xmm)$/;"	f
shuffle_1w	vu/shuffle.h	/^static __m128i shuffle_1w(__m128i xmm)$/;"	f
shuffle_2h	vu/shuffle.h	/^static __m128i shuffle_2h(__m128i xmm)$/;"	f
shuffle_2w	vu/shuffle.h	/^static __m128i shuffle_2w(__m128i xmm)$/;"	f
shuffle_3h	vu/shuffle.h	/^static __m128i shuffle_3h(__m128i xmm)$/;"	f
shuffle_3w	vu/shuffle.h	/^static __m128i shuffle_3w(__m128i xmm)$/;"	f
shuffle_4w	vu/shuffle.h	/^static __m128i shuffle_4w(__m128i xmm)$/;"	f
shuffle_5w	vu/shuffle.h	/^static __m128i shuffle_5w(__m128i xmm)$/;"	f
shuffle_6w	vu/shuffle.h	/^static __m128i shuffle_6w(__m128i xmm)$/;"	f
shuffle_7w	vu/shuffle.h	/^static __m128i shuffle_7w(__m128i xmm)$/;"	f
shuffle_none	vu/shuffle.h	/^static __m128i shuffle_none(__m128i xmm)$/;"	f
smask	vu/shuffle.h	/^static const unsigned char smask[16][16] = {$/;"	v
stage	rsp.h	/^static int stage;$/;"	v
stale_signals	rsp.c	/^int stale_signals;$/;"	v
sub_mask	vu/shuffle.h	/^int sub_mask[16] = {$/;"	v
swc_res	su.h	/^NOINLINE static void swc_res(int vt, int element, signed offset, int base)$/;"	f
temp_PC	rsp.h	/^static int temp_PC;$/;"	v
unused	Rsp_#1.1.h	/^struct HDC__ {int unused;};$/;"	m	struct:HDC__
unused	Rsp_#1.1.h	/^struct HINSTANCE__ {int unused;};$/;"	m	struct:HINSTANCE__
unused	Rsp_#1.1.h	/^struct HMENU__ {int unused;};$/;"	m	struct:HMENU__
unused	Rsp_#1.1.h	/^struct HWND__ {int unused;};$/;"	m	struct:HWND__
vce	vu/cf.h	/^short vce[8]; \/* $vce:  vector compare extension register *\/$/;"	v
vector_copy	vu/clamp.h	/^static INLINE void vector_copy(short* VD, short* VS)$/;"	f
